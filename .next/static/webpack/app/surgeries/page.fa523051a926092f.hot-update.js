"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/surgeries/page",{

/***/ "(app-pages-browser)/./src/lib/services/surgeries.ts":
/*!***************************************!*\
  !*** ./src/lib/services/surgeries.ts ***!
  \***************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   surgeriesService: function() { return /* binding */ surgeriesService; }\n/* harmony export */ });\n/* harmony import */ var _lib_supabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/supabase */ \"(app-pages-browser)/./src/lib/supabase.ts\");\n\nconst surgeriesService = {\n    // Get all surgeries with room and doctor information\n    async getAll () {\n        const { data, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"surgeries\").select(\"\\n        *,\\n        operating_rooms!inner(room_number),\\n        main_doctor:doctors!surgeries_main_doctor_id_fkey(name, specialty),\\n        secondary_doctor:doctors!surgeries_secondary_doctor_id_fkey(name, specialty)\\n      \").order(\"date\", {\n            ascending: true\n        }).order(\"time_slot\", {\n            ascending: true\n        });\n        if (error) throw error;\n        return data || [];\n    },\n    // Get surgeries for a specific date range\n    async getByDateRange (startDate, endDate) {\n        const { data, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"surgeries\").select(\"\\n        *,\\n        operating_rooms!inner(room_number),\\n        main_doctor:doctors!surgeries_main_doctor_id_fkey(name, specialty),\\n        secondary_doctor:doctors!surgeries_secondary_doctor_id_fkey(name, specialty)\\n      \").gte(\"date\", startDate).lte(\"date\", endDate).order(\"date\", {\n            ascending: true\n        }).order(\"time_slot\", {\n            ascending: true\n        });\n        if (error) throw error;\n        return data || [];\n    },\n    // Get surgeries for a specific room\n    async getByRoom (roomId) {\n        const { data, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"surgeries\").select(\"\\n        *,\\n        operating_rooms!inner(room_number),\\n        main_doctor:doctors!surgeries_main_doctor_id_fkey(name, specialty),\\n        secondary_doctor:doctors!surgeries_secondary_doctor_id_fkey(name, specialty)\\n      \").eq(\"room_id\", roomId).order(\"date\", {\n            ascending: true\n        }).order(\"time_slot\", {\n            ascending: true\n        });\n        if (error) throw error;\n        return data || [];\n    },\n    // Get a single surgery by ID\n    async getById (id) {\n        const { data, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"surgeries\").select(\"\\n        *,\\n        operating_rooms!inner(room_number),\\n        main_doctor:doctors!surgeries_main_doctor_id_fkey(name, specialty),\\n        secondary_doctor:doctors!surgeries_secondary_doctor_id_fkey(name, specialty)\\n      \").eq(\"id\", id).single();\n        if (error) throw error;\n        return data;\n    },\n    // Check for scheduling conflicts\n    async checkConflict (surgeryData) {\n        const { data, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"surgeries\").select(\"id\").eq(\"room_id\", surgeryData.room_id).eq(\"date\", surgeryData.date).eq(\"time_slot\", surgeryData.time_slot).single();\n        if (error && error.code !== \"PGRST116\") {\n            throw error;\n        }\n        if (data) {\n            return {\n                room_id: surgeryData.room_id,\n                date: surgeryData.date,\n                time_slot: surgeryData.time_slot,\n                existing_surgery_id: data.id\n            };\n        }\n        return null;\n    },\n    // Create a new surgery\n    async create (surgeryData) {\n        // First check for conflicts\n        const conflict = await this.checkConflict(surgeryData);\n        if (conflict) {\n            throw new Error(\"This time slot is already booked for this room on \".concat(surgeryData.date));\n        }\n        const { data, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"surgeries\").insert(surgeryData).select(\"\\n        *,\\n        operating_rooms!inner(room_number)\\n      \").single();\n        if (error) throw error;\n        return data;\n    },\n    // Update a surgery\n    async update (id, surgeryData) {\n        // If updating room, date, or time_slot, check for conflicts\n        if (surgeryData.room_id || surgeryData.date || surgeryData.time_slot) {\n            const currentSurgery = await this.getById(id);\n            if (!currentSurgery) {\n                throw new Error(\"Surgery not found\");\n            }\n            const checkData = {\n                room_id: surgeryData.room_id || currentSurgery.room_id,\n                date: surgeryData.date || currentSurgery.date,\n                time_slot: surgeryData.time_slot || currentSurgery.time_slot,\n                surgery_type: currentSurgery.surgery_type,\n                main_doctor_id: currentSurgery.main_doctor_id,\n                secondary_doctor_id: currentSurgery.secondary_doctor_id\n            };\n            const conflict = await this.checkConflict(checkData);\n            if (conflict && conflict.existing_surgery_id !== id) {\n                throw new Error(\"This time slot is already booked for this room on \".concat(checkData.date));\n            }\n        }\n        const { data, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"surgeries\").update(surgeryData).eq(\"id\", id).select(\"\\n        *,\\n        operating_rooms!inner(room_number)\\n      \").single();\n        if (error) throw error;\n        return data;\n    },\n    // Delete a surgery\n    async delete (id) {\n        const { error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"surgeries\").delete().eq(\"id\", id);\n        if (error) throw error;\n    },\n    // Get surgeries for a specific week (Monday to Sunday)\n    async getByWeek (weekStart) {\n        const weekEnd = new Date(weekStart);\n        weekEnd.setDate(weekEnd.getDate() + 6);\n        const { data, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"surgeries\").select(\"\\n        *,\\n        operating_rooms!inner(room_number)\\n      \").gte(\"date\", weekStart).lte(\"date\", weekEnd.toISOString().split(\"T\")[0]).order(\"date\", {\n            ascending: true\n        }).order(\"time_slot\", {\n            ascending: true\n        });\n        if (error) throw error;\n        return data || [];\n    },\n    // Get available time slots for a specific room and date\n    async getAvailableSlots (roomId, date) {\n        const { data, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"surgeries\").select(\"time_slot\").eq(\"room_id\", roomId).eq(\"date\", date);\n        if (error) throw error;\n        const bookedSlots = (data === null || data === void 0 ? void 0 : data.map((s)=>s.time_slot)) || [];\n        const allSlots = [\n            \"morning\",\n            \"evening\"\n        ];\n        return allSlots.filter((slot)=>!bookedSlots.includes(slot));\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/services/surgeries.ts\n"));

/***/ })

});